generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

generator zod {
  provider          = "prisma-zod-generator"
  output            = "./zod"
  recursiveStrategy = "depth-limit"
  maxDepth          = 2
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                   String    @id @default(uuid())
  nomeCompleto         String
  email                String    @unique
  senha                String
  genero               Genero
  dataNascimento       String
  perfil               Perfil
  organizacao          String
  tentativasLogin      Int       @default(0)
  tentativasExclusao   Int       @default(0)
  bloqueadoAte         DateTime?
  tokenRedefinirSenha  String?   @db.VarChar(257)
  expiraRedefinirSenha DateTime?

  /// @Zod.Omit(input: true)
  projetosCriados Projeto[] @relation("ProjetosCriados")

  /// @Zod.Omit(input: true)
  brainstormingsCriados Brainstorming[] @relation("BrainstormingsCriados")

  /// @Zod.Omit(input: true)
  participacoesProjeto ProjetoUsuario[]

  /// @Zod.Omit(input: true)
  participacoesPorEmail ProjetoUsuario[] @relation("ProjetoUsuarioPorEmail")
}

model Projeto {
  id          String        @id @default(uuid())
  nomeProjeto String        @unique
  descricao   String?
  criadorId   String
  status      StatusProjeto @default(NOVO)

  criador Usuario @relation("ProjetosCriados", fields: [criadorId], references: [id], onDelete: Cascade)

  /// @Zod.Omit(input: true)
  membros ProjetoUsuario[]

  /// @Zod.Omit(input: true)
  brainstormings BrainstormingProjeto[]
}

model Brainstorming {
  id                 String @id @default(uuid())
  criadorId          String
  titulo             String
  projetoRelacionado String
  data               String
  horario            String
  historiasUsuario   String

  criador Usuario @relation("BrainstormingsCriados", fields: [criadorId], references: [id], onDelete: Cascade)

  /// @Zod.Omit(input: true)
  projetos BrainstormingProjeto[]
}

model ProjetoUsuario {
  id             String       @id @default(uuid())
  projetoId      String
  membroId       String
  nomeMembro     String
  emailMembro    String
  papelNoProjeto PapelProjeto

  projeto Projeto @relation(fields: [projetoId], references: [id], onDelete: Cascade)

  /// @Zod.Omit(input: true)
  membro Usuario @relation(fields: [membroId], references: [id])

  /// @Zod.Omit(input: true)
  membroPorEmail Usuario @relation("ProjetoUsuarioPorEmail", fields: [emailMembro], references: [email], onDelete: Cascade)

  @@map("projeto_usuario")
}

model BrainstormingProjeto {
  projetoId       String
  brainstormingId String

  /// @Zod.Omit(input: true)
  projeto Projeto @relation(fields: [projetoId], references: [id], onDelete: Cascade)

  /// @Zod.Omit(input: true)
  brainstorming Brainstorming @relation(fields: [brainstormingId], references: [id], onDelete: Cascade)

  @@id([projetoId, brainstormingId])
  @@map("brainstorming_projeto")
}

enum Genero {
  FEMININO
  MASCULINO
  NAO_BINARIO
  PREFERE_NAO_INFORMAR
}

enum Perfil {
  ESTUDANTE_GRADUACAO
  ESTUDANTE_POS_GRADUACAO
  PROFESSOR
  PROFISSIONAL_INDUSTRIA
}

enum StatusProjeto {
  NOVO
  DELETADO
  ANTIGO
}

enum PapelProjeto {
  MODERADOR
  PARTICIPANTE
}
